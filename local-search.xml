<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SCU江安校区音游出勤指南</title>
    <link href="/2025/07/02/SCU%E6%B1%9F%E5%AE%89%E6%A0%A1%E5%8C%BA%E9%9F%B3%E6%B8%B8%E5%87%BA%E5%8B%A4%E6%8C%87%E5%8D%97/"/>
    <url>/2025/07/02/SCU%E6%B1%9F%E5%AE%89%E6%A0%A1%E5%8C%BA%E9%9F%B3%E6%B8%B8%E5%87%BA%E5%8B%A4%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重试。" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5457fa0978b156f4ae514cb2e41a6e88f9dee83460388bf48ee2c08dc91c8757"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码以继续阅读。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>SCU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Games</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统期末复习</title>
    <link href="/2025/06/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2025/06/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="第二章-操作系统引论-：-6个考点">第二章 (操作系统引论)： 6个考点</h3><ol><li><p>操作系统的概念、与一般程序的异同。</p><ul><li>操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配；以提供给用户和其他软件方便的接口和环境；它是计算机系统中最基本的系统软件。</li><li>相同点：都是软件，运行在计算机上。都由代码编写而成，能够完成一定功能。</li><li>不同点：直接控制硬件资源，无需依赖其他程序；而一般程序依赖操作系统环境，基于操作系统提供的接口运行。</li></ul></li><li><p>操作系统的功能和目标。</p><ul><li>进程管理，存储管理，设备管理，文件管理。</li><li>安全，高效。</li></ul></li><li><p>操作系统的模块数量 (3或4个)。</p><ul><li>进程管理模块，存储管理模块，设备管理模块，文件管理模块</li></ul></li><li><p>操作系统发展阶段 (从无到有，从简单到复杂，3或4个阶段)。</p><ul><li>手工操作阶段，批处理阶段，分时操作系统，实时操作系统</li></ul></li><li><p>分时系统与批处理系统的概念、背景、异同点对比 (参考书上表2-3)。</p><ul><li><p>分时系统：多个用户通过终端共享主机资源。为提高用户交互效率。</p></li><li><p>批处理系统：用户将作业打包提交，系统自动依次处理。为提高CPU使用率。</p></li><li><p><strong>交互性不同：</strong> 批处理系统不具备用户交互能力，分时系统支持多用户通过终端交互；</p><p><strong>调度策略不同：</strong> 批处理采用非抢占顺序执行，分时系统采用时间片轮转，实现并发执行；</p><p><strong>系统目标不同：</strong> 批处理系统以提高系统资源利用率为目标，分时系统以提升用户响应速度为目标；</p><p><strong>适用对象不同：</strong> 批处理系统适合长时间、自动化任务，分时系统适合实时性强、多任务交互的场景。</p></li></ul></li><li><p>中断和异常在批处理/分时系统中的作用。</p><p>确保系统能够灵活地响应外部事件和处理错误。</p><table><thead><tr><th></th><th>中断</th><th>异常</th></tr></thead><tbody><tr><td>批处理</td><td>实现I/O设备的异步工作，避免CPU空转</td><td>用于检测程序运行错误，终止无效作业，避免系统崩溃，提升系统稳定性。</td></tr><tr><td>分时</td><td>支持时间片终止中断，实现多用户进程的快速切换。</td><td>除错误检测外，还可用于系统调用</td></tr></tbody></table></li></ol><h3 id="第三章-进程管理-：-9个考点">第三章 (进程管理)： 9个考点</h3><ol><li><p>操作系统实现进程所需的CPU硬件支持。</p><ul><li>分时操作、上下文切换、中断机制、特权级切换、内存管理单元</li></ul></li><li><p>进程概念、与程序的区别和关系。</p><ul><li><p>进程是一个正在执行的程序，是操作系统中资源分配和调度的基本单位</p></li><li><p>程序是静态的，它指的是存储在磁盘上的一组指令和数据；而进程是程序的执行实体，是动态的，</p><p>包含程序的执行状态。程序是一个文件，进程是一个活动实体。程序不占用计算资源，进程需要。</p></li></ul></li><li><p>PCB (进程控制块) 的概念及其核心构成数据 (参考表2-3，图3-1)。</p><ul><li><strong>进程控制块</strong>是操作系统中用来管理进程的核心数据结构，它保存着与进程相关的所有信息。</li><li>核心构成：PID、进程状态、优先级。</li></ul></li><li><p>进程生命周期 (参考C语言画的CSCPP图)、进程映像。</p><ul><li>创建、就绪、运行、阻塞、终止。</li><li>进程映像是进程运行所需的所有信息的集合，包括程序段、数据段、堆区、栈区、PCB。</li></ul></li><li><p>常用进程系统调用 (创建、销毁、阻塞、通讯、同步)。</p><ul><li>创建：<code>fork()</code>、<code>exec()</code>、<code>CreateProcess</code></li><li>销毁：<code>exit()</code>、<code>kill()</code></li><li>阻塞：<code>sleep(time)</code>、<code>pause()</code></li><li>通讯：<code>pipe()</code></li><li>同步：<code>semwait()</code></li></ul></li><li><p>进程五状态图 (不考七状态图)，可能看图说话或画图。</p></li></ol><p>书上例题 (去年考过，今年可能性不大)。</p><ol start="7"><li><p>进程切换、CPU态切换、进程状态切换三者关系。</p><ul><li>进程切换：是指 <strong>CPU 从一个进程的执行切换到另一个进程的执行</strong>，即保存当前进程的上下文，恢复另一个进程的上下文。发生于进程调度时。</li><li>CPU在两种运行状态之间切换：用户态 ↔ 内核态，常因系统调用、中断、异常等事件触发。</li><li>进程状态切换：<strong>进程自身所处的生命周期状态发生改变</strong>，运行态 → 就绪态，或就绪态 → 运行态等。</li><li>进程切换一定涉及 CPU 态切换和进程状态切换，其余两个发生不一定影响其他两个。<ul><li>用户进程调用系统调用，没有设计 CPU 态和进程切换。</li><li>进程由于I/O阻塞：发生进程状态切换，伴随进程切换和 CPU 态切换。</li></ul></li></ul></li><li><p>进程创建流程 (以Linux fork为例：一次调用两次返回)。</p><ul><li><p>fork 调用一次后，<strong>当前进程会被复制出一个几乎完全相同的新进程</strong>。</p></li><li><p><strong>父进程调用 <code>fork()</code> 系统调用：</strong></p><ul><li>进入内核态，向操作系统请求创建子进程。</li></ul><p><strong>内核为子进程分配资源：</strong></p><ul><li>创建新的进程控制块（PCB），分配新的 PID。</li><li>复制父进程的用户空间数据（代码段、数据段、堆栈等）</li></ul><p><strong>复制父进程的上下文信息：</strong></p><ul><li>包括打开的文件描述符、信号处理设置等。</li></ul><p><strong>两个进程恢复到用户态：</strong></p><ul><li>父子进程继续从 <code>fork()</code> 返回点开始执行，但返回值不同：<ul><li>父进程返回子进程的 PID</li><li>子进程返回 0</li></ul></li></ul><p><strong>子进程可调用 <code>exec()</code> 执行其他程序，或继续与父进程并发执行。</strong></p></li></ul></li></ol><h3 id="第四章-线程管理-：-3个考点">第四章 (线程管理)： 3个考点</h3><ol><li>线程概念、产生背景、与进程的关系。<ul><li>线程是程序执行的最小单位，它是进程中的一个执行单元。</li><li>线程产生是因为进程切换开销太大，单进程无法实现更细的并发策略，所以出现了在同一进程内划分多个执行单元的做法。</li><li>进程在程序执行期间创建线程，线程仅拥有最基本的运行信息，直接共享内存，一个线程崩溃引起整个进程崩溃。</li></ul></li><li>线程实现的三类方法。<ul><li>用户级线程：操作系统只看到一个进程，线程的管理完全由应用程序控制。</li><li>内核级线程：操作系统内核管理线程</li><li>混合模型：互相协作，有一对多、多对多等。</li></ul></li><li>ULT (用户级线程) 与 KLT (核心级线程) 的各自优缺点。<ul><li>ULT：用户线程库管理，切换快，移植性高，但是一个线程阻塞，整个进程阻塞。</li><li>KLT：操作系统内核管理，切换慢，移植性低，但是一个线程阻塞不会影响其他线程，且支持线程的系统调用。</li></ul></li></ol><h3 id="第五章-同步与互斥-：-6个考点">第五章 (同步与互斥)： 6个考点</h3><ol><li><p>并发的四个问题。</p><ul><li>同步、互斥、饥饿、死锁</li></ul></li><li><p>条件竞争定义与举例 (如Linux fork)</p><ul><li><p>当多个进程或线程并发访问共享资源，并且<strong>访问顺序会影响最终结果</strong>时，就会发生条件竞争</p></li><li><pre><code class="language-cpp">void *thread_func(void *arg) &#123;    if (count == 0) &#123;        fork();  // 第一个线程进来时 count = 0，fork() 执行        count++;    &#125;    return NULL;&#125;</code></pre></li><li><p>可能会引起竞争。</p></li></ul></li><li><p>临界区的组成部分及各部分作用。</p><ul><li>进入区、临界区、退出区。</li><li>请求进入临界区、实际访问共享资源的代码区、离开临界区释放占用的资源。</li></ul></li><li><p>解决同步互斥的方法</p><ul><li>软件、硬件、信号量、管程、消息通讯/传递。</li></ul></li><li><p>进程间关系及其产生背景。</p><ul><li><strong>并发性：</strong> 提高系统资源利用率</li><li><strong>协作性：</strong> 共同完成复杂任务</li><li><strong>依赖性：</strong> 保证执行逻辑正确性</li><li><strong>竞争性：</strong> 体现对资源的冲突控制</li></ul></li><li><p>管程定义及其构成。</p><ul><li>管程是一种高级并发程序结构，封装<strong>共享数据结构、操作过程和同步机制</strong>，由编程语言或操作系统原语支持。系统自动管理互斥。</li><li>构成：共享变量、过程、入口队列、条件变量、互斥机制。</li></ul></li></ol><h3 id="第六章-死锁-：-4个考点">第六章 (死锁)： 4个考点</h3><ol><li>死锁定义与举例 (代码或画图)。<ul><li>死锁（Deadlock）是指<strong>两个或多个进程在执行过程中，因争夺资源而造成的一种互相等待的现象</strong>，若无外力干预，它们都将永远阻塞下去，无法继续执行。</li></ul></li><li>死锁的条件 (3个或4个)。<ul><li>互斥、占有且等待、不剥夺、循环等待</li></ul></li><li>死锁解决方法 (书上三大类，可能有第四种综合方法)。<ul><li>死锁预防：破坏死锁的必要条件中一个或多个。</li><li>死锁避免：银行家算法。</li><li>死锁检测与解除：建立资源分配图。</li><li>综合方法。</li></ul></li><li>银行家算法 (Dijkstra提出) 的思想、局限性、能否真正解决死锁。<ul><li>只有当系统判断资源分配后仍处于“安全状态”时，才进行资源分配。</li><li>需要提前知道每个进程最大资源需求，动态场景中难以适应，算法复杂度较高，无法应对非资源型死锁</li><li>能“避免”死锁，而不是“根除”死锁。</li></ul></li></ol><h3 id="第七章-存储管理-根据内容推断-：-3个考点">第七章 (存储管理 - 根据内容推断)： 3个考点</h3><ol><li><p>七类存储管理方法划分为三类的依据及区别。</p><ul><li>虚拟内存：虚拟内存分段和虚拟内存分页：地址空间虚拟化</li><li>连续分配：动态分区、固定分区、伙伴系统：整个逻辑空间在物理内存中连续分配</li><li>非连续分配：分段、分页：进程逻辑空间分散映射到多个物理内存位置</li></ul></li><li><p>内部碎片与外部碎片概念 (固定分区/分页产生内部；动态分区/分段产生外部)。</p><ul><li>内部碎片：实际分配的内存空间大于程序所需空间，<strong>未被使用的部分形成浪费</strong>。</li><li>外部碎片：内存中存在<strong>大量小的空闲块</strong>，虽然总量充足，但因不连续，无法满足新程序需求。</li></ul></li><li><p>画图题 (根据书上CPU、内存图重画)。</p><ul><li><p><strong>CPU 发出逻辑地址（页号 + 页内偏移）</strong></p><p><strong>通过页表</strong>查找该页对应的<strong>物理页框</strong></p><p>若页表未命中，产生<strong>缺页中断</strong>，从磁盘调入所需页面</p><p>页面被调入物理内存并更新页表</p></li></ul></li></ol><h3 id="第八章-虚拟存储-：-3个考点">第八章 (虚拟存储)： 3个考点</h3><ol><li>虚拟存储需考虑的三个问题 (答案在书P225)。<ul><li>地址转换机制，页面（或段）调入机制，页面（或段）置换机制</li></ul></li><li>实现虚拟存储的三种方法 (虚拟分段、虚拟分页、虚拟段页) 及简述。<ul><li>虚拟分页：以固定大小“页”为单位管理虚拟地址空间，程序运行时仅加载部分页面，其余页面缺页时再从磁盘调入。</li><li>虚拟分段：按程序逻辑结构（如代码段、数据段、堆栈段）划分虚拟地址空间。</li><li>虚拟段页：先分段，段内再分页，结合两者优点。每段维护一个页表，调入时可按页调入</li></ul></li><li>Page Fault (页故障) 处理流程 (书上原话)。<ul><li>CPU 访问虚拟地址，触发缺页异常，操作系统判断该页是否合法，若合法，则从虚拟内存调入该页，将新页读入内存页框中，更新页表，恢复进程执行。</li></ul></li></ol><h3 id="第九章-进程调度-：-2个考点">第九章 (进程调度)： 2个考点</h3><ol><li>长程、中程、短程三种调度的关系和概念 (书上有图，可能看图说话)。<ul><li>长程：按照某种策略决定将哪个进程从外存加载到内存中</li><li>中程：按照某种策略决定将哪个处于挂起状态的进程重新调入内存。</li><li>短程：按照某种策略从就绪队列中选取一个进程，将处理机分配给它。</li></ul></li><li>不同进程调度算法的性能对比和公平性比较 (如是否易产生死锁)。<ul><li>先来先服务，FCFS，非抢占，对所有进程公平，对短作业等待更长时间。</li><li>最短作业优先，SJF，非抢占，长作业饥饿</li><li>最高响应比优先，HRRN，非抢占式，不易饥饿，但算法复杂度较高。<ul><li>响应比 = (等待时间 + 服务时间) / 服务时间；</li></ul></li><li>时间片轮转，RR，抢占，时间片过小 → 上下文切换开销大，时间片过大会变成 FCFS。</li><li>优先级调度，PS，抢占或非抢占，会产生饥饿。</li><li>多级反馈队列，MFQ（Feedback），最复杂、最灵活。</li></ul></li></ol><h3 id="第十章：-无考点">第十章： 无考点。</h3><h3 id="第十一章：">第十一章：</h3><ol><li>IO Buffer 概念。<ul><li>是指在 CPU 与外设之间传输数据时，临时存放数据的内存区域。CPU 的处理速度远高于 I/O 设备。</li></ul></li></ol><h3 id="第十二章-文件系统-：-5个考点">第十二章 (文件系统)： 5个考点</h3><ol><li><p>文件系统层次(类似TCP/IP)。</p><p><img src="/img/assets/e8e51244127f9d9c4727f91868cf7b38.png" alt=""></p></li><li><p>逻辑层 (5种方法) 和物理层 (3种方法) 的考点及概念。</p><p>逻辑层：</p><ul><li>堆：数据按到达的顺序收集，遍历时用穷举的方式。</li><li>顺序文件：使用固定格式，保存各个域的值。</li><li>索引顺序文件：提供快速查找文件的能力。</li><li>索引文件：多索引结构。</li><li>直接或散列文件：直接访问磁盘中任何一个地址已知的块的能力。</li></ul><p>物理层：</p><ul><li>连续分配：文件占用连续磁盘块，适合顺序访问</li><li>链接分配：磁盘块用指针相连，文件可不连续</li><li>索引分配：用索引块记录文件所有块号，灵活访问</li></ul></li><li><p>文件分配中分区大小设计需考虑的因素 (如可变性、大小、连续性；参考高老师PPT)。</p><ul><li>若文件大小变化大，应使用支持<strong>动态增长</strong>的分配方式</li><li>大文件系统适合采用<strong>多级索引、索引分配</strong></li><li>多媒体、数据库等对<strong>顺序读取性能要求高</strong>，适合连续分配</li></ul></li><li><p>连续分配与链式分配的问题及解决方法 (参考书上图)。</p><ul><li><p>连续分配：访问速度快，逻辑地址到物理地址转换简单。缺点：文件增长困难，易产生外部碎片，大文件管理困难。</p><p>解决方法：引入链式分配。</p></li><li><p>链式分配：空间利用率高，便于文件动态增长。缺点：随机访问性能差，指针造成的空间浪费，</p><p>解决方法：用 <strong>FAT 表</strong>集中管理指针，采用<strong>索引分配</strong>提高随机访问能力。</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>SCU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库期末复习-规范化</title>
    <link href="/2025/06/09/%E8%A7%84%E8%8C%83%E5%8C%96/"/>
    <url>/2025/06/09/%E8%A7%84%E8%8C%83%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="规范化">规范化</h2><p>不经过规范化存在的问题：数据冗余，更新异常，插入异常，删除异常</p><p>一个好的关系模式应该不会发生插入异常、删除异常和更新异常，数据冗余也会降到最小。</p><p>一个关系模式中属性之间的相互约束、相互制约关系，称作数据依赖。是现实世界属性间相互联系的抽象，数据内在的性质，语义的体现。</p><p>一个关系模式之所以会产生上述问题，是由于关系模式中存在着不良的函数依赖关系引起的。所以需要通过规范化理论来改造关系模式，消除不合适的数据依赖，解决以上问题。</p><h3 id="规范化的目的">规范化的目的</h3><ul><li>消除数据冗余（因此使用更少的空间）</li><li>使更改数据变得更容易，并且在这样做时避免出现异常</li><li>使参照完整性约束更易于实施</li><li>产生易于理解的结构，该结构与数据所代表的情况非常相似，并可以进行扩展</li></ul><h3 id="1nf">1NF</h3><p>第一范式是最基本的规范形式，即关系中每个属性都是不可再分的简单项。</p><p>以下表为例。</p><p><strong>ClientRental</strong></p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td><u>clientNo</u></td><td><u>propertyNo</u></td><td>cName</td><td>pAddress</td><td>rentStart</td><td>rentFinish</td><td>rent</td><td>ownerNo</td><td>oName</td></tr></tbody></table><h3 id="2nf">2NF</h3><p>函数依赖 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding="application/x-tex">X\rightarrow Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span>，即对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 的每一个具体值，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> 都有唯一的具体值与之对应。</p><h4 id="函数依赖及选择关键字">函数依赖及选择关键字</h4><p>在以上表中，存在函数依赖：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>-&gt; <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span>-&gt; <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">8 </span>-&gt; <span class="hljs-number">9</span><br><span class="hljs-number">5</span>, <span class="hljs-number">6</span> 无唯一性<br></code></pre></td></tr></table></figure><p>以下引入前提：一个客户只能租一套房。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>, <span class="hljs-number">2</span> -&gt; <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>发现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{1, 2\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">}</span></span></span></span> 可以决定其余的所有，于是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{1, 2\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">}</span></span></span></span> 为候选关键字</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>, <span class="hljs-number">5</span> -&gt; <span class="hljs-number">2</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>发现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{1, 5\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">}</span></span></span></span> 可以决定其余的所有，于是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{1, 5\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">}</span></span></span></span> 为候选关键字</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>, <span class="hljs-number">5</span> -&gt; <span class="hljs-number">1</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>发现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{2, 5\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">}</span></span></span></span> 可以决定其余的所有，于是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">{</mo><mn>2</mn><mo separator="true">,</mo><mn>5</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{2, 5\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mclose">}</span></span></span></span> 为候选关键字</p><p>结合实际情况，<u>clientNo</u> 与 <u>propertyNo</u> 作为主关键字。</p><p>2NF：<strong>属性完全依赖于主键</strong></p><p>要达到 2NF，必须要在<strong>函数依赖里</strong>消除部分依赖 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">A&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，即消除：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo separator="true">,</mo><msup><mi>A</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>→</mo><mi>B</mi><mo separator="true">,</mo><mi>A</mi><mo>⊃</mo><msup><mi>A</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">A \rightarrow B, A&#x27; \rightarrow B, A \supset A&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊃</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> 为候选关键字。</p><p>比如</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span> -&gt; <span class="hljs-number">3</span><br><span class="hljs-attribute">A</span> = <span class="hljs-number">1</span>, <span class="hljs-number">5</span> -&gt; <span class="hljs-number">3</span><br><span class="hljs-attribute">A</span>&#x27; = <span class="hljs-number">1</span> -&gt; <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>即 <code>1 -&gt; 3</code> 为部分依赖。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span> -&gt; <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br><span class="hljs-attribute">A</span>&#x27; = <span class="hljs-number">2</span> -&gt; <span class="hljs-number">4</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>即 <code>2 -&gt; 4 7 8 9</code> 为部分依赖。</p><p><code>1 -&gt; 3</code>： 单独提出去，Client 表</p><p><code>2 -&gt; 4 7 8 9</code>：单独提出去，PropertyOwner 表</p><h3 id="3nf">3NF</h3><p>要达到 <strong>3NF</strong>，必须要消除传递依赖，即消除：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>→</mo><mi>B</mi><mo separator="true">,</mo><mi>B</mi><mo>→</mo><mi>C</mi><mo>⇒</mo><mi>A</mi><mo>→</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">A\rightarrow B, B\rightarrow C\Rightarrow A\rightarrow C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>比如</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span>-&gt; <span class="hljs-number">8</span>, <span class="hljs-number">2</span> -&gt; <span class="hljs-number">9</span> =&gt; <span class="hljs-number">8</span> -&gt; <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><code>8 -&gt; 9</code> 单独提出去，Owner 表。</p><h3 id="规范到-bcnf-的例子">规范到 BCNF 的例子</h3><p>以上例子 3NF=BCNF，于是采用以下例子。</p><h4 id="step-1-1nf">Step 1: 1NF</h4><p>1NF：<strong>StaffPropertyInspection</strong></p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>propertyNo</td><td>iDate</td><td>iTime</td><td>pAddress</td><td>comments</td><td>staffNo</td><td>sName</td><td>carReg</td></tr></tbody></table><h4 id="step-2-find-dependency-determine-candidate-keys">Step 2: Find Dependency &amp; Determine Candidate Keys</h4><p>在以上表中，存在函数依赖：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>-&gt; <span class="hljs-number">4</span><br><span class="hljs-symbol">6 </span>-&gt; <span class="hljs-number">7</span><br><span class="hljs-number">2</span>, <span class="hljs-number">6</span> -&gt; <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>以下引入假设。</p><p><strong>Assumption #1</strong>：一个房产一天内只被看一次</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>, <span class="hljs-number">2</span> -&gt; <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>可以推出 <code>1, 2 -&gt; 3 4 5 6 7 8</code>。<code>1, 2</code> 为候选关键字。（主关键字）</p><p><strong>Assumption #2</strong>：同一日期时间，一辆车只有一个职员开</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span> -&gt; <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p><code>2, 3, 8</code> 为候选关键字</p><p><strong>Assumption #3</strong>：同一日期时间，一个职员只能看一个房</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span> -&gt; <span class="hljs-number">1</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><code>2, 3, 6</code> 为候选关键字。</p><h4 id="step-3-dependency-split-to-3nf">Step 3: Dependency Split (To 3NF)</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>-&gt; <span class="hljs-number">4</span><br><span class="hljs-number">2</span>, <span class="hljs-number">6</span> -&gt; <span class="hljs-number">8</span><br><span class="hljs-symbol">6 </span>-&gt; <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>分别为部分依赖、部分依赖和传递依赖。分别提出作为两个表。</p><p><strong>Property (PartialDependency)</strong></p><table><thead><tr><th>1</th><th>4</th></tr></thead><tbody><tr><td><u>propertyNo</u></td><td>pAddress</td></tr></tbody></table><p><strong>Staff (TransitiveDependency)</strong></p><table><thead><tr><th>6</th><th>7</th></tr></thead><tbody><tr><td><u>staffNo</u></td><td>sName</td></tr></tbody></table><p><strong>StaffCar (PartialDependency)</strong></p><table><thead><tr><th>2</th><th>6</th><th>8</th></tr></thead><tbody><tr><td>iDate</td><td>staffNo</td><td>carReg</td></tr></tbody></table><p><strong>propertyInspection (3NF)</strong>：</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>5</th><th>6</th></tr></thead><tbody><tr><td><u>propertyNo</u></td><td><u>iDate</u></td><td>iTime</td><td>comments</td><td>staffNo</td></tr></tbody></table><h4 id="step4-boyce-codd-paradigm">Step4: Boyce-Codd Paradigm</h4><blockquote><p>当且仅当每个函数依赖的决定方都是候选关键字时，某一关系才是 BCNF 的。</p></blockquote><p>在现实生活中，很少有数据库设计符合 3NF 且违反 BCNF，除了在一些比较特殊的条件下。可能会违反BCNF的情况有：</p><ul><li>关系中包含两个（或更多个）合成候选关键字。</li><li>候选关键字互相重叠，通常至少都包含一个相同的属性。</li></ul><p>重新检查 <strong>propertyInspection</strong> 表，其包含两个函数依赖：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Assumption</span> #<span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span> -&gt; <span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> (PK)<br><span class="hljs-attribute">Assumption</span> #<span class="hljs-number">3</span>: <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span> -&gt; <span class="hljs-number">1</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>此时第二个函数依赖的决定方不是候选关键字，表违反 BCNF 范式，需要将此依赖提出，并最终规范成以下两个表：</p><p><strong>InspectionDetail (BCNF)</strong></p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>5</th></tr></thead><tbody><tr><td><u>propertyNo</u></td><td><u>iDate</u></td><td><u>iTime</u></td><td>comments</td></tr></tbody></table><p><strong>InspectionAssignment (BCNF)</strong></p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>6</th></tr></thead><tbody><tr><td>propertyNo</td><td><u>iDate</u></td><td><u>iTime</u></td><td><u>staffNo</u></td></tr></tbody></table><p>其余表显然满足 BCNF 范式。</p><h3 id="更多范式？">…更多范式？</h3><p>更高范式（如 4NF、5NF）处理多值依赖、连接依赖，但使用很少。</p><p>一般而言，规范到 3NF / BCNF 已经足够满足大部分需求。更高级的范式有可能反而增加了数据库设计的复杂度，且结构更复杂，操作更慢，维护困难。</p><p><strong>3NF 和 BCNF 能有效解决数据冗余、插入异常、删除异常和更新异常</strong>，而且在性能和设计复杂度之间达到了平衡，有什么理由不用呢？</p><h3 id="总结">总结</h3><p>规范化就是对原关系进行投影，消除决定属性不是候选键的任何函数依赖。具体可以分为以下几步：</p><ol><li>对 1NF 关系进行投影，消除原关系中非主属性对键的部分函数依赖，将 1NF 关系转换成若干个 2NF 关系。</li><li>对 2NF 关系进行投影，消除原关系中非主属性对键的传递函数依赖，将 2NF 关系转换成若干个 3NF 关系。</li><li>对 3NF 关系进行投影，消除原关系中主属性对键的部分函数依赖和传递函数依赖，也就是说使决定因素都包含一个候选键。得到一组BCNF关系。</li></ol><h3 id="参考文章">参考文章</h3><p><a href="https://blog.csdn.net/qq_43437874/article/details/115313363">https://blog.csdn.net/qq_43437874/article/details/115313363</a></p>]]></content>
    
    
    <categories>
      
      <category>SCU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库期末复习-SQL</title>
    <link href="/2025/06/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-SQL/"/>
    <url>/2025/06/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0-SQL/</url>
    
    <content type="html"><![CDATA[<h1 id="sql">SQL</h1><p>理想情况下，数据库语言应该允许用户：</p><ul><li>建立数据库和关系结构。</li><li>完成基本数据管理任务，诸如关系中数据的插入、修改和删除。</li><li>完成简单或复杂的查询。</li></ul><p>SQL 语句有以下几种：</p><ul><li><strong>增</strong>：用于将数据插人表中。</li><li><strong>删</strong>：用于删除表中数据。</li><li><strong>改</strong>：用于更新表中数据。</li><li><strong>查</strong>：用于查询数据库中的数据。</li></ul><p>SQL 语句一般使用 <code>;</code> 分隔。</p><h2 id="select">SELECT</h2><h3 id="形式">形式</h3><p><img src="/img/assets/image-20250607234709710.png" alt=""></p><p>意思是：查询从 TableName, … 表（别名为 alias, …）中，满足（非聚集型）condition 的行，按具有相同属性的值分成组，满足（聚集性）condition 的组，选出查询结果中的列，并按某些列排序并返回。</p><p>可以看出，其执行顺序为：<strong>FROM</strong>，WHERE，GROUP BY，HAVING，<strong>SELECT</strong>，ORDER BY</p><h3 id="单表查询">单表查询</h3><h4 id="from-where">FROM / WHERE</h4><ol><li>列出所有员工的月工资列表。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> staffNo, fName, lName, salary<span class="hljs-operator">/</span><span class="hljs-number">12</span> <span class="hljs-keyword">FROM</span> Staff;<br></code></pre></td></tr></table></figure><ol start="2"><li>列出工资高于 10000 元的所有员工。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Staff <span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">10000</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>列出工资在 10000 元到 20000 元之间的所有员工。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Staff <span class="hljs-keyword">WHERE</span> salary <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">20000</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Staff <span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10000</span> <span class="hljs-keyword">AND</span> salary <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20000</span>;<br></code></pre></td></tr></table></figure><p>Tips: SQL 语句中可用的比较运算符如下：</p><p><img src="/img/assets/image-20250609114346382.png" alt=""></p><p>SQL 中，NOT 优先于 AND 和 OR，AND 优先于 OR。一般用括号消除歧义。</p><ol start="4"><li>列出所有的经理和主管，且地址含有字符串 <code>Glasgow</code>。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Staff <br><span class="hljs-keyword">WHERE</span> position <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Manager&#x27;</span>, <span class="hljs-string">&#x27;Supervisor&#x27;</span>) <br><span class="hljs-keyword">AND</span> address <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%Glasgow%&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="5"><li>列出查看过房产编号为 PG4 的房产但没有留下意见的客户的情况。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> clientNo, viewDate <span class="hljs-keyword">FROM</span> Viewing<br><span class="hljs-keyword">WHERE</span> propertyNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PG4&#x27;</span> <span class="hljs-keyword">AND</span> comment <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h4 id="order-by">ORDER BY</h4><ol start="6"><li>列出所有职工的工资列表，按第一关键字为工资，第二关键字为员工名降序。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> staffNo, fName, lName, salary<br><span class="hljs-keyword">FROM</span> Staff<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary, fName <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h4 id="聚集函数">聚集函数</h4><ul><li><code>COUNT</code>：返回指定列中数据的个数。<ul><li><code>COUNT(*)</code> 和 <code>COUNT(1)</code> 的统计包含 NULL 值。</li></ul></li><li><code>SUM</code>：返回指定列中数据的总和。</li><li><code>AVG</code>：返回指定列中数据的平均值。</li><li><code>MIN</code>：返回指定列中数据的最小值。</li><li><code>MAX</code>：返回指定列中数据的最大值。</li></ul><p>聚集函数不能用于 WHERE 子句。</p><ol start="7"><li>月租金超过 350 英镑的房产有多少处？</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> MyCount <span class="hljs-keyword">FROM</span> PropertyForRent<br><span class="hljs-keyword">WHERE</span> rent <span class="hljs-operator">&gt;</span> <span class="hljs-number">350</span>;<br></code></pre></td></tr></table></figure><ol start="8"><li>2025 年 5 月有多少处不同的房产被查看过？</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> propertyNo) <span class="hljs-keyword">AS</span> myCount <span class="hljs-keyword">FROM</span> Viewing<br><span class="hljs-keyword">WHERE</span> viewDate <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;1-May-25&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;31-May-25&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="group-by-having">GROUP BY / HAVING</h4><p><code>GROUP BY</code> 是用来<strong>对结果集进行分组</strong>的，通常与聚集函数搭配使用。</p><ol start="9"><li>找出工作在每一个分公司的员工人数。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> branchNo, <span class="hljs-built_in">COUNT</span>(staffNo) <span class="hljs-keyword">AS</span> myCount <span class="hljs-keyword">FROM</span> Staff<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> branchNo;<br></code></pre></td></tr></table></figure><p>这里 <code>GROUP BY</code> 的意思是，以 <code>branchNo</code> 的<strong>值</strong>为分组依据，对<strong>每组</strong>分别求 <code>COUNT</code>。</p><p>课本上有一句话：</p><blockquote><p>SELECT 子句中的所有列除非用在聚集函数中，否则必须在 GROUP BY 子句中出现。</p></blockquote><p>这是为了避免逻辑上的歧义 —— 因为在分组统计时，你要明确告诉数据库<strong>按哪些列来分组，其它列应该如何处理</strong>。</p><p>课本上一句非法的 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> staffNo, <span class="hljs-built_in">COUNT</span>(salary) <span class="hljs-keyword">FROM</span> Staff;<br></code></pre></td></tr></table></figure><p>因为 <code>staffNo</code> 不用于分组依据，但是同时还会查询 <code>salary</code> 的聚集函数。所以查询出的 <code>staffNo</code> 没有分组，SQL 这时因为不知道此列的分组和返回值而报错。</p><p>对聚集函数的约束，使用 <code>HAVING</code> 子句。它是用在 <code>GROUP BY</code> 之后的，作用类似 <code>WHERE</code>，但 <code>WHERE</code> 是对<strong>原始数据</strong>筛选，<code>HAVING</code> 是对<strong>分组结果</strong>筛选。</p><ol start="10"><li>对于员工人数多于一人的分公司，计算出每一个分公司的员工人数和他们的工资总和。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> branchNo, <span class="hljs-built_in">COUNT</span>(staffNo) <span class="hljs-keyword">AS</span> myCount, <span class="hljs-built_in">SUM</span>(salary) <span class="hljs-keyword">AS</span> mySum<br><span class="hljs-keyword">FROM</span> Staff<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> branchNo<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(staffNo) <span class="hljs-operator">&gt;</span><span class="hljs-number">1</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> branchNo:<br></code></pre></td></tr></table></figure><h3 id="多次查询与多表查询">多次查询与多表查询</h3><h4 id="子查询">子查询</h4><p>查询返回值本质为表。所以可以将 SELECT 语句完全嵌套到另一个 SELECT 语句中。</p><p>用于比较时，子查询需放在式子右边。</p><ol start="11"><li>列出在位于 <code>163 Main St</code> 的分公司中工作的员工的情况。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> staffNo, fName, lName, position <span class="hljs-keyword">FROM</span> Staff<br><span class="hljs-keyword">WHERE</span> branchNo <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> branchNo <span class="hljs-keyword">FROM</span> Branch <span class="hljs-keyword">WHERE</span> street <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;163 Main St&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="12"><li>列出正由位于 <code>163 Main St</code> 的分公司的员工经营的房产。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> propertyNo, street, city, postcode, type, rooms, rent<br><span class="hljs-keyword">FROM</span> PropertyForRent<br><span class="hljs-keyword">WHERE</span> staffNo <span class="hljs-keyword">IN</span> <br>(<span class="hljs-keyword">SELECT</span> staffNo <span class="hljs-keyword">FROM</span> Staff <span class="hljs-keyword">WHERE</span> branchNo <span class="hljs-operator">=</span> <br> (<span class="hljs-keyword">SELECT</span> branchNo <span class="hljs-keyword">FROM</span> Branch <span class="hljs-keyword">WHERE</span> street <span class="hljs-operator">=</span><span class="hljs-string">&#x27;163 Main St&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>限定词 <code>ALL</code> 和 <code>ANY/SOME</code> 用于对于子查询的比较。含有 <code>ALL</code> 的条件为真当且仅当子查询产生的所有值都满足条件。<code>ANY/SOME</code> 条件只需至少一个值满足即可。</p><ol start="13"><li>列出工资高于分公司 <code>B003</code> 中任何员工的工资的所有员工。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> staffNo, fName, IName, position, salary<br><span class="hljs-keyword">FROM</span> Staff<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALL</span> (<span class="hljs-keyword">SELECT</span> salary <span class="hljs-keyword">FROM</span> Staff <span class="hljs-keyword">WHERE</span> branchNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B003&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="多表查询">多表查询</h4><ol start="14"><li>列出查看过房产的所有客户的姓名及其所提的意见。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> c.clientNo, fName,IName, propertyNo, comment<br><span class="hljs-keyword">FROM</span> Client c, Viewing v<br><span class="hljs-keyword">WHERE</span> c.clientNo<span class="hljs-operator">=</span>v.clientNo;<br></code></pre></td></tr></table></figure><p>Tips：如果两个表的查询不使用 <code>WHERE</code> 子句，那么 SQL 产生的查询结果是两个表的笛卡尔乘积。</p><h4 id="连接">连接</h4><ol start="15"><li>对于表 A 和表 B，其共用列用重叠区域表示。</li></ol><p><img src="/img/assets/image-20250609144757109.png" alt=""></p><p>内连接：查询结果为 c。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.<span class="hljs-operator">*</span>, B.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> A, B <span class="hljs-keyword">WHERE</span> A.name <span class="hljs-operator">=</span> B.name<br></code></pre></td></tr></table></figure><p>左外连接：查询结果为 a，c。B 表里无匹配的行用 NULL 填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.<span class="hljs-operator">*</span>, B.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> A <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> A.name <span class="hljs-operator">=</span> B.name<br></code></pre></td></tr></table></figure><p>右外连接：查询结果为 b，c。A 表里无匹配的行用 NULL 填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.<span class="hljs-operator">*</span>, B.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> A <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> A.name <span class="hljs-operator">=</span> B.name<br></code></pre></td></tr></table></figure><p>全外连接：查询结果为 a，b，c。A 表里无匹配 B，B 表里无匹配 A 的行用 NULL 填充。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> A.<span class="hljs-operator">*</span>, B.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> A <span class="hljs-keyword">FULL</span> <span class="hljs-keyword">JOIN</span> B <span class="hljs-keyword">ON</span> A.name <span class="hljs-operator">=</span> B.name<br></code></pre></td></tr></table></figure><h4 id="exists">EXISTS</h4><p>仅用于子查询中，如果查询结果有至少一行，返回真；否则返回假。可用 NOT 修饰。</p><ol start="16"><li>找出工作在伦敦分公司的所有员工。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> staffNo, fName, lNaMe,position<br><span class="hljs-keyword">FROM</span> Staff s<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Branch b<br>  <span class="hljs-keyword">WHERE</span> s.branchNo <span class="hljs-operator">=</span> b.branchNo <span class="hljs-keyword">AND</span> city <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;London&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="union-intersect-except">UNION / INTERSECT / EXCEPT</h4><p>用于执行多表查询集合的并 / 交 / 差。</p><p>加 <code>CORRESPONDING BY</code> 表示操作在对应列进行。</p><ol start="17"><li>建立有分公司<strong>或</strong>有房产的所有城市的列表。</li></ol><p><img src="/img/assets/image-20250609151136043.png" alt=""></p><ol start="18"><li>建立<strong>既</strong>有分公司<strong>又</strong>有房产的所有城市的列表。</li></ol><p><img src="/img/assets/image-20250609171756406.png" alt=""></p><ol start="19"><li>建立有分公司但是没有房产的所有城市的列表。</li></ol><p><img src="/img/assets/image-20250609171854914.png" alt=""></p><h2 id="insert-update-delete">INSERT / UPDATE / DELETE</h2><h3 id="insert">INSERT</h3><h4 id="insert-into">INSERT INTO</h4><p>命令格式：</p><p><img src="/img/assets/image-20250609172312792.png" alt=""></p><p>插入数据时，要指定列名，或者按照表中原本出现的顺序插入。</p><ol start="20"><li>在 Staff 表中插入一行。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Staff (staffNo, fName, IName, position, salary, branchNo)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;SG44&#x27;</span>, <span class="hljs-string">&#x27;Anne&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Assistant&#x27;</span>, <span class="hljs-number">8100</span>, <span class="hljs-string">&#x27;B003&#x27;</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Staff<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;SG44&#x27;</span>, <span class="hljs-string">&#x27;Anne&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Assistant&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-number">8100</span>, <span class="hljs-string">&#x27;B003&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="insert-select">INSERT … SELECT</h4><p>命令格式：</p><p><img src="/img/assets/image-20250609173730528.png" alt=""></p><ol start="21"><li><p>假设表 StaffPropCount 中包含员工的名字及他所管理的房产的数目。</p><p>StaffPropCount(staffNo, fName, IName, propCount)</p><p>用表 Staff 和表 PropertyForRent 中的数据产生表 StaffPropCount。</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> StaffPropCount<br>(<br>    <span class="hljs-keyword">SELECT</span> s.staffNo, fName, lName, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br> <span class="hljs-keyword">FROM</span> Staff s,PropertyForRent p<br> <span class="hljs-keyword">WHERE</span> s.staffNo<span class="hljs-operator">=</span>p.staffNo<br> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s.staffNo, fName, lName<br>)<br><span class="hljs-keyword">UNION</span><br>(<br>    <span class="hljs-keyword">SELECT</span> staffNo, fName, lName, <span class="hljs-number">0</span><br> <span class="hljs-keyword">FROM</span> Staff s<br> <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> <br>    (<br>      <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>     <span class="hljs-keyword">FROM</span> PropertyForRent p<br>     <span class="hljs-keyword">WHERE</span> p.staffNo<span class="hljs-operator">=</span> S.staffNo<br>    )<br>);<br></code></pre></td></tr></table></figure><blockquote><p>提问：为什么要有 <code>UNION</code> 后的部分？</p></blockquote><h3 id="update">UPDATE</h3><p>命令格式：</p><p><img src="/img/assets/image-20250609173718304.png" alt=""></p><ol start="22"><li>提升 SG14 为经理，工资变为原来的 1.05 倍。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Staff<br><span class="hljs-keyword">SET</span> position <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Manager&#x27;</span>, salary <span class="hljs-operator">=</span> salary <span class="hljs-operator">*</span> <span class="hljs-number">1.05</span><br><span class="hljs-keyword">WHERE</span> staffNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SG14&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="delete">DELETE</h3><p>命令格式：</p><p><img src="/img/assets/image-20250609173950705.png" alt=""></p><ol start="23"><li>删除所有与房产 SG4 有关的行。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Viewing <span class="hljs-keyword">WHERE</span> propertyNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PG4&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="24"><li>从表 Viewing 中删除所有行。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Viewing;<br></code></pre></td></tr></table></figure><h2 id="完整性约束">完整性约束</h2><p>完整性约束分为：</p><ul><li>必须有值的数据</li><li>域约束</li><li>实体完整性</li><li>引用完整性</li><li>一般性约束</li></ul><p>这些约束能用 <code>CREATE</code> 和 <code>ALTER TABLE</code> 语句定义</p><h3 id="必须有值的数据">必须有值的数据</h3><p>某些列的值必须为有效值，不允许为空。空不同于空格或零，而是用来表示数据不可用、丢失或不合适。例如，每一个员工必须有相应的职位（比如经理、助理等）。</p><p>ISO 标准为 CREATE 和 ALTER TABLE 语句提供的 NOT NULL 列说明符实现了这种约束。</p><p>若指定列为 NOT NULL，则系统拒绝向列中插人空值；若指定列为 NULL，则系统接受空值。ISO 默认值为 NULL。例如，</p><ol start="24"><li>定义表 Staff 中的列 position 不能为空。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">position <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><h3 id="域约束-check">域约束 CHECK</h3><h4 id="check-子句">CHECK 子句</h4><p>每列都有一个域，换句话说，就是合法值的集合。</p><p>CHECK 子句的格式如下：</p><p><img src="/img/assets/image-20250609175741497.png" alt=""></p><ol start="25"><li>员工的性别为“M”或“F”。表 Staff 中的列 sex 的域为仅包含“M”和“F”的字符集。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sex <span class="hljs-type">CHAR</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">CHECK</span> (sex <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="domain">DOMAIN</h4><p>ISO 标准允许用 CREATE DOMAIN 显式地定义域 DomainName。格式如下：</p><p><img src="/img/assets/image-20250609175857342.png" alt=""></p><p>同时指定了可选的默认值 defaultOption 和可选的 CHECK 约束。</p><p>从数据库撤销约束用 DROP DOMAIN 语句。</p><p><img src="/img/assets/image-20250609183450313.png" alt=""></p><p>删除模式指定为 RESTRICT 时，如果该域正在被表、视图、断言使用，则删除失败。指定为 CASCADE 时，层叠地更改正在使用此域的表为该域的基类型定义。域上的约束或 DEFAULT 会被列约束和列 DEFAULT 子句代替。</p><ol start="26"><li>用 CREATE DOMAIN 解决 25.。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DOMAIN SexType <span class="hljs-keyword">AS</span> <span class="hljs-type">CHAR</span><br><span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;M&#x27;</span><br><span class="hljs-keyword">CHECK</span> (<span class="hljs-keyword">VALUE</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>);<br><br>sex SexType <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><ol start="27"><li>创建域 BranchNumber，确保输入的值是表 Branch 中已存在的分公司。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DOMAIN BranchNumber <span class="hljs-keyword">AS</span> <span class="hljs-type">CHAR</span>(<span class="hljs-number">4</span>)<br><span class="hljs-keyword">CHECK</span> (<span class="hljs-keyword">VALUE</span> <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> branchNo <span class="hljs-keyword">FROM</span> Branch);<br></code></pre></td></tr></table></figure><ol start="28"><li>撤销域约束 BranchNumber。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DOMAIN BranchNumber<br></code></pre></td></tr></table></figure><h3 id="实体完整性-primary-key">实体完整性 Primary Key</h3><p>表中每一行的主关键字必须是唯一的非空值。例如，表 PropertyForRent 的每一行都有一个唯一的房产编号 propertyNo 值，它能唯一地标识该行代表的房产。ISO 标准在 <code>CREATE</code> 和 <code>ALTER TABLE</code> 语句中用 PRIMARY KEY 子句支持实体完整性。</p><ol start="29"><li>定义表 PropertyForRent 的主关键字。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">PRIMARY</span> KEY(propertyNo)<br></code></pre></td></tr></table></figure><ol start="30"><li>定义表 Viewing 的组合主关键字 clientNo 和 propertyNo。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">PRIMARY</span> KEY(clientNo, propertyNo)<br></code></pre></td></tr></table></figure><p>每个表中只能使用一个 PRIMARY KEY 子句。但是，可用关键字 UNIQUE 保证列的唯一性。</p><p>UNIQUE 子句中出现的每个列必须被声明为 NOT NULL。每个表中可能有多个 UNIQUE 子句。若 INSERT 或 UPDATE 操作试图为候选关键字（即主关键字或可选关键字）创建重复值，SQL将会拒绝操作。</p><h3 id="引用完整性-foreign-key">引用完整性 Foreign Key</h3><p>外部关键字是某个列或列集合，它把包含外部关键字的子表中的每个元组与父表中包含匹配候选关键字值的元组关联起来。引用完整性是指，外部关键字必须是父表中已存在的有效的元组。</p><p>ISO 标准允许在 CREATE 和  ALTER TABLE 语句中使用 FOREIGN KEY 子句定义外部关键字。</p><ol start="31"><li>定义表 PropertyForRent 的外部关键字 branchNo：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FOREIGN</span> KEY(branchNo) <span class="hljs-keyword">REFERENCES</span> Branch<br></code></pre></td></tr></table></figure><h4 id="referential-action">Referential Action</h4><p>在子表中若试图用 INSERT 和 UPDATE 操作，创建与父表中候选关键字不匹配的外部关键字，SQL 则会拒绝该操作。而在父表中若试图用 UPDATE 和 DELETE 操作更新或删除与子表有匹配行的候选关键字，SQL 将根据 FOREIGN KEY 子句中的 ON UPDATE 或 ON DELETE 子句来决定如何执行该操作。当用户企图删除父表中的某行时，子表中有一个或多个匹配行，SQL 有四种选择：</p><ul><li><code>CASCADE</code>：删除父表中的行并且自动删除子表中匹配的行。由于删除的行可能有候选关键字是另一个表的外部关键字，所以这些表的外部关键字规则就会以级联的方式相继触发。</li><li><code>SET NULL</code>：删除父表中的元组且设置子表中的外部关键字为 NULL。只有当外部关键字列没有指定为 NOT NULL 时，这样做才是有效的。</li><li><code>SET DEFAULT</code>：删除父表中的元组且设子表中的外部关键字为默认值。只有当外部关键字列指定了 DEFAULT 值时，这样做才是有效的。</li><li><code>NO ACTION</code>：拒绝对父表进行删除操作。是 <code>ON DELETE</code> 的默认操作。</li></ul><ol start="32"><li>指定更新规则为，如果表 PrivateOwner 中的业主编号更新，则表 PropertyForRent 中的相应列设置为更新值。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FOREIGN</span> KEY (ownerNo) <span class="hljs-keyword">REFERENCES</span> PrivateOwner <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> CASCADE<br></code></pre></td></tr></table></figure><h3 id="一般性约束-assertion">一般性约束 ASSERTION</h3><p>对表的更新可能受到企业规则的约束，企业规则用来控制该更新操作所代表的现实世界中的事务。例如，DreamHome 可能有规定，禁止员工同时管理 100 个以上房产。</p><p>ISO 标准允许用 <code>CREATE</code> 和 <code>ALTER TABLE</code> 语句中的 <code>CHECK</code> 和 <code>UNIQUE</code> 子句以及 <code>CREATE ASSERTION</code> 语句指定一般性约束。</p><p><code>CREATE ASSERTION</code> 语句是不直接与表定义相关联的完整性约束。语句格式如下：</p><p><img src="/img/assets/image-20250609182906297.png" alt=""></p><ol start="33"><li>DreamHome 规定，禁止员工同时管理 100 个以上房产。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ASSERTION StaffNotHandlingTooMuch<br><span class="hljs-keyword">CHECK</span> (<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> <br>      (<span class="hljs-keyword">SELECT</span> staffNo <span class="hljs-keyword">FROM</span> PropertyForRent <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> staffNo <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span><span class="hljs-number">100</span>));<br></code></pre></td></tr></table></figure><h2 id="数据定义">数据定义</h2><h3 id="schema">SCHEMA</h3><p>根据 ISO 标准，关系和其他的数据库对象都存在于某个环境中。每个环境含一个或多个目录，每个目录中包括一组<strong>模式</strong>。模式是一组数据库对象的命名集合，该集合中的对象以某种方式相互关连（数据库中出现的任一对象恰在一个模式中描述）。</p><p><img src="/img/assets/image-20250609183350266.png" alt=""></p><p><img src="/img/assets/image-20250609183358817.png" alt=""></p><p>如果指定了 RESTRICT ，则模式必须为空，否则删除操作将失败。如果指定 CASCADE ，那么将按前面定义的顺序级联地删除与模式相关的所有对象。</p><h3 id="table">TABLE</h3><h4 id="create">CREATE</h4><p>创建表结构 CREATE TABLE 语句基本规则如下：</p><p><img src="/img/assets/image-20250609183756821.png" alt=""></p><p>其他语句前文已经讲过，除了用于定义外键约束的 <code>REFERENCES</code>。</p><p>其作用是在当前表中指定某一列为<strong>外键</strong>，并<strong>引用另一张表的主键或唯一键</strong>，从而在逻辑上建立表与表之间的关联。</p><ol start="34"><li><p>有表定义：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> departments (<br>    dept_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    dept_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>)<br>);<br></code></pre></td></tr></table></figure><p>建立子表 employees，引用 departments 的 <code>dept_id</code>。</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    emp_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    emp_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),<br>    dept_id <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">FOREIGN</span> KEY (dept_id) <span class="hljs-keyword">REFERENCES</span> departments(dept_id)<br>);<br></code></pre></td></tr></table></figure><h4 id="alter">ALTER</h4><p><code>ALTER TABLE</code> 用于改变表的结构。包含：</p><ul><li>在表中添加一个新列</li><li>从表中删除一个列</li><li>添加一项新的表约束</li><li>删除一项表约束</li><li>设置列默认值</li><li>删除列默认值</li></ul><p>语句基本格式：</p><p><img src="/img/assets/image-20250609184701464.png" alt=""></p><ol start="35"><li>修改表 Staff，删除列 position 的默认值 Assistant，且设置列 sex 的默认值为女性（F）。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Staff <span class="hljs-keyword">ALTER</span> position <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Staff <span class="hljs-keyword">ALTER</span> Sex <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;F&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="36"><li>修改表 PropertyForRent，删除员工不能同时管理 100 处以上房产的约束。修改表 Client，增加一个新的列表示他对房间数的意愿。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> PropertyForRent <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> StaffNotHandlingTooMuch;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Client <span class="hljs-keyword">ADD</span> prefNoRooms PropertyRooms;<br></code></pre></td></tr></table></figure><h4 id="drop">DROP</h4><p><img src="/img/assets/image-20250609185148697.png" alt=""></p><h3 id="index">INDEX</h3><p>索引是一种结构，它提供了基于一个或多个列值快速访问表中元组的方法。</p><p>创建：</p><p><img src="/img/assets/image-20250609185226000.png" alt=""></p><p>删除：</p><p><img src="/img/assets/image-20250609185311336.png" alt=""></p><h3 id="view">VIEW</h3><p>视图是<strong>封装查询逻辑的虚拟表</strong>，用于简化 SQL、增强安全性和可维护性，但它不存储数据。适合经常复用的复杂查询。</p><h4 id="create">CREATE</h4><p><img src="/img/assets/image-20250609185856377.png" alt=""></p><p>subselect 称为定义查询。如果说明 WITH CHECK OPTION，SQL 将确保那些不满足定义查询中 WHERE 子句的行不会被添加到视图的基表中。</p><p>水平视图限制用户只能访问一个或多个表中选定的元组。</p><p>垂直视图限制用户只能访问一个或多个表中选定的列。</p><ol start="37"><li>创建一个（水平）视图，让分公司 B003 的经理只看到他所在分公司的员工的情况。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> Manager3Staff <span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Staff <span class="hljs-keyword">WHERE</span> branchNo <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;B003&#x27;</span>;<br></code></pre></td></tr></table></figure><p>要确保该分公司的经理只看到这些元组，就不应该允许他访问基表 Staff 。而是给他访问视图 Manger3Staff 的权限。效果上，就是为分公司经理定制了表 Staff 的一个视图，通过它只能看到他所在分公司的员工的情况。</p><ol start="38"><li>建立一个（垂直）视图，包括分公司 B003 员工的除工资外的信息，为的是只让经理看到员工的工资情况。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> Staff3<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> staffNo, fName,IName, position, sex<br><span class="hljs-keyword">FROM</span> Staff <span class="hljs-keyword">WHERE</span> branchNo <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;B003&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="39"><li>创建负责管理出租房产的员工的视图，包括员工所在分公司的编号、员工编号和他们管理的房产的数量。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> StaffPropCnt (branchNo,staffNo, cnt)<br><span class="hljs-keyword">AS</span> <span class="hljs-keyword">SELECT</span> s.branchNo, s.staffNo, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span> Staff s, PropertyForRent p<br><span class="hljs-keyword">WHERE</span> s.staffNo <span class="hljs-operator">=</span> p.staffNo<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s.branchNo, s.staffNo;<br></code></pre></td></tr></table></figure><h4 id="drop">DROP</h4><p><img src="/img/assets/image-20250609190400970.png" alt=""></p><h4 id="视图分解">视图分解</h4><p>视图分解就是将对视图的查询与视图的定义查询合并。学习视图分解的意义在于理解对视图进行的查询过程。</p><ol start="40"><li><p>视图分解以下查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> staffNo, cnt <span class="hljs-keyword">FROM</span> StaffPropCnt <span class="hljs-keyword">WHERE</span> branchNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B003&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> staffNo;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.staffNo <span class="hljs-keyword">AS</span> staffNo,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) AScnt<br><span class="hljs-keyword">FROM</span> Staff s, PropertyForRent p<br><span class="hljs-keyword">WHERE</span> s.staffNo<span class="hljs-operator">=</span>p.staffNo <span class="hljs-keyword">AND</span> branchNo<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B003&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s.branchNo,s.staffNo<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> s.staffNo;<br></code></pre></td></tr></table></figure><h4 id="视图的局限性">视图的局限性</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(cnt) <span class="hljs-keyword">FROM</span> StaffPropCnt;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> StaffPropCnt <span class="hljs-keyword">WHERE</span> cnt <span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>这两个查询会失败。因为如果视图中某个列是基于聚集函数的，那么在访问该视图的查询语句中，该列只能出现在 <code>SELECT</code> 和 <code>ORDER BY</code> 子句里。而不能出现在 <code>WHERE</code> 子句中，也不能作为任何聚集函数的参数。</p><h4 id="视图的可更新性">视图的可更新性</h4><p>为了使视图可更新，对于任何一个行或列，DBMS 必须都能追溯到其源表中相应的行或列。</p><h4 id="with-check-option">WITH CHECK OPTION</h4><p><strong>通过视图插入或更新的数据，必须满足视图定义的条件（WHERE 子句）</strong>，否则操作会被拒绝。默认情况下，你可以通过视图更新或插入一些“不属于该视图的数据”，这在逻辑上是很危险的。<code>WITH CHECK OPTION</code> 就是为了防止这种“<strong>绕过视图定义条件</strong>”的操作。</p><p>如果指定了 <code>WITH LOCAL CHECK OPTION</code>，那么在该视图或由该视图直接或间接导出的视图上进行插入或更新操作时，不允许行迁移出视图，<strong>除非该行也迁移出底层视图或表</strong>。</p><p>如果指定了 <code>WITH CASCADED CHECK OPTION</code>（默认设置)，那么在该视图或由该视图直接或间接导出的视图上进行行插入或更新操作时，都不允许行迁移出该视图。一般使用这个创建视图。</p><p><img src="/img/assets/image-20250609203336482.png" alt=""></p><h4 id="视图物化">视图物化</h4><p>把第一次访问视图的结果存储为数据库的临时表。比重新计算视图快得多。</p><h4 id="视图的优缺点">视图的优缺点</h4><p>数据独立性，实时性，提高安全性，降低复杂性，方便，用户化，数据完整性。</p><p>更新局限性，结构局限性，性能开销。</p>]]></content>
    
    
    <categories>
      
      <category>SCU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毛概期末复习</title>
    <link href="/2025/06/09/%E6%AF%9B%E6%A6%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <url>/2025/06/09/%E6%AF%9B%E6%A6%82%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>警告：<br>这篇复习文章组成结构为：老师课上划重点，ChatGPT 生成答案。</p>          </div><h2 id="✅导论部分">✅导论部分</h2><h3 id="❓1-马克思主义中国化时代化的提出背景-时间与会议？">❓1. 马克思主义中国化时代化的提出背景、时间与会议？</h3><p><strong>答：</strong><br>一、提出背景：<br>为适应新时代党的理论创新需要，系统总结百年党史经验，进一步推动马克思主义理论与中国实际相结合。</p><p>二、提出时间与会议：</p><ul><li><strong>时间</strong>：2022年10月</li><li><strong>会议</strong>：中国共产党第二十次全国代表大会（党的二十大）</li></ul><p>三、核心表述：<br>党的二十大报告中首次提出“推进马克思主义中国化时代化”，标志着新时代党的理论创新进入新阶段。</p><hr><h3 id="❓2-如何理解马克思主义中国化时代化的内涵？">❓2. 如何理解马克思主义中国化时代化的内涵？</h3><p><strong>答：</strong><br>一、理论基础：<br>是对马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观的继承与发展。</p><p>二、基本内涵：</p><ol><li><strong>中国化</strong>：坚持将马克思主义基本原理与中国具体国情、历史文化相结合，体现中国特色。</li><li><strong>时代化</strong>：要求马克思主义与时俱进，回应时代课题，解决中国发展的现实问题。</li><li><strong>统一性</strong>：两者共同服务于中国特色社会主义伟大事业，是党的指导思想的创新发展。</li></ol><p>三、现实意义：<br>推动理论创新和实践深化，为实现中华民族伟大复兴提供科学指导。</p><hr><h3 id="❓3-马克思主义中国化时代化的主要理论成果有哪些？它们之间有何关系？">❓3. 马克思主义中国化时代化的主要理论成果有哪些？它们之间有何关系？</h3><p><strong>答：</strong><br>一、主要成果：</p><ol><li><strong>毛泽东思想</strong>：马克思主义中国化第一次飞跃的理论成果；</li><li><strong>邓小平理论、“三个代表”重要思想、科学发展观</strong>：第二次飞跃的重要成果；</li><li><strong>习近平新时代中国特色社会主义思想</strong>：新时代马克思主义，是第三次飞跃成果。</li></ol><p>二、内在关系：</p><ul><li>各理论成果一脉相承、与时俱进，共同构成党的指导思想的发展体系。</li><li>是马克思主义中国化时代化进程中的阶段性成果，在党的理论建设中具有系统性和继承性。</li></ul><hr><h2 id="✅第一章-毛泽东思想">✅第一章 毛泽东思想</h2><h3 id="❓4-毛泽东思想形成和发展的历史条件是什么？">❓4. 毛泽东思想形成和发展的历史条件是什么？</h3><p><strong>答：</strong><br>一、时代背景：<br>中国社会处于半殖民地半封建状态，民族独立和人民解放成为最迫切任务。</p><p>二、实践基础：<br>中国共产党领导的长期革命斗争（如土地革命、抗日战争、解放战争）为理论发展提供经验。</p><p>三、理论依据：<br>深入学习和吸收马克思列宁主义基本原理，在实践中加以创新运用。</p><p>四、国际影响：<br>十月革命和苏联经验为中国革命提供借鉴与启发。</p><hr><h3 id="❓5-毛泽东思想的-活的灵魂-包括哪些内容？">❓5. 毛泽东思想的“活的灵魂”包括哪些内容？</h3><p><strong>答：</strong><br>一、基本内涵：<br>“活的灵魂”是毛泽东思想的精髓，是指导思想的核心内容。包括以下三方面：</p><ol><li><strong>实事求是</strong>：从实际出发研究问题，是党的思想路线的核心；</li><li><strong>群众路线</strong>：一切依靠群众，一切为了群众，是党的根本工作路线；</li><li><strong>独立自主</strong>：坚定走自己的道路，维护国家主权和发展自主性。</li></ol><p>二、作用意义：<br>“活的灵魂”体现了毛泽东思想的基本立场、观点和方法，为党领导革命和建设提供根本指导。</p><hr><h3 id="❓6-新民主主义革命理论形成的依据有哪些？-重点">❓6. 新民主主义革命理论形成的依据有哪些？（重点）</h3><p><strong>答：</strong><br>一、国情基础：<br>中国是半殖民地半封建社会，革命的对象、动力与目标具有特殊性。</p><p>二、革命经验：<br>总结大革命失败与农村包围城市、武装夺取政权的成功经验。</p><p>三、理论指导：<br>坚持将马克思主义普遍原理与中国具体实际相结合，创造性发展革命理论。</p><p>四、阶级分析：<br>明确无产阶级领导下的多阶级统一战线，科学处理阶级矛盾。</p><p>五、指导原则：<br>强调革命阶段性目标，即推翻帝国主义、封建主义和官僚资本主义。</p><hr><h3 id="❓7-中国新民主主义革命总路线的提出背景与主要内容是什么？">❓7. 中国新民主主义革命总路线的提出背景与主要内容是什么？</h3><p><strong>答：</strong><br>一、提出背景：<br>抗战胜利后，中国面临决定性发展阶段，需要明确革命方向和目标。</p><p>二、提出时间与内容：</p><ul><li>1939年毛泽东首次提出；</li><li>1948年《在晋绥干部会议上的讲话》中全面阐述；</li><li>内容是“一切反帝反封建的革命是新民主主义的革命”。</li></ul><p>三、意义：<br>确立革命指导方针，系统指导中国从半殖民地半封建社会向社会主义过渡。</p><hr><h3 id="❓8-新民主主义革命三大法宝是什么？各自作用如何？">❓8. 新民主主义革命三大法宝是什么？各自作用如何？</h3><p><strong>答：</strong><br>一、统一战线：<br>联合一切可以联合的阶级与力量，形成革命的最广泛群众基础。</p><p>二、武装斗争：<br>依靠人民军队进行长期革命斗争，是革命胜利的关键手段。</p><p>三、党的建设：<br>坚持无产阶级政党的领导地位，加强党性锻炼与组织纪律保障。</p><p>四、总体意义：<br>三大法宝构成中国革命成功的重要支柱，相辅相成，共同推动革命事业发展。</p><hr><h2 id="✅第三章-社会主义改造">✅第三章 社会主义改造</h2><h3 id="❓9-如何理解过渡时期社会的性质？其主要成分包括哪些？">❓9. 如何理解过渡时期社会的性质？其主要成分包括哪些？</h3><p><strong>答：</strong><br>一、概念理解：<br>过渡时期是新民主主义社会向社会主义社会转变的历史阶段。</p><p>二、社会成分：</p><ol><li>社会主义国营经济；</li><li>个体劳动经济；</li><li>资本主义工商业；</li><li>合作社经济（半社会主义性质）。</li></ol><p>三、特点：<br>社会结构多样、性质复杂，是从旧社会向新社会转型的重要阶段。</p><hr><h3 id="❓10-社会主义改造道路的历史经验有哪些？">❓10. 社会主义改造道路的历史经验有哪些？</h3><p><strong>答：</strong><br>一、坚持正确方向：<br>始终以社会主义为目标，不动摇根本立场。</p><p>二、采取和平方式：<br>在工商业改造中推行“和平赎买”，体现灵活策略。</p><p>三、三步走策略：<br>利用、限制、改造相结合，逐步实现国有化。</p><p>四、发挥群众作用：<br>充分发动广大农民参与合作化运动。</p><p>五、历史意义：<br>成功实现三大改造，为我国社会主义经济制度建立奠定基础。</p><hr><h2 id="✅第四章-社会主义建设探索">✅第四章 社会主义建设探索</h2><h3 id="❓11-论十大关系-的基本内容与意义是什么？">❓11.《论十大关系》的基本内容与意义是什么？</h3><p><strong>答：</strong><br>一、背景：<br>1956年社会主义基本制度确立后，迫切需要探索建设道路。</p><p>二、主要内容：<br>毛泽东提出处理十种重大关系，如重工业与轻工业、沿海与内地、国家与地方、中央与地方等。</p><p>三、指导思想：<br>提出统筹兼顾、调动各方积极性，走符合中国国情的建设道路。</p><p>四、历史意义：<br>标志着党探索社会主义建设规律的开端，强调实事求是、创新思维。</p><hr><h3 id="❓12-关于正确处理人民内部矛盾的问题-解决了哪些问题？">❓12.《关于正确处理人民内部矛盾的问题》解决了哪些问题？</h3><p><strong>答：</strong><br>一、主要内容：<br>明确人民内部矛盾与敌我矛盾的性质不同，处理方法也应有所区别。</p><p>二、处理方式：</p><ol><li>运用民主方式和协商手段；</li><li>提倡团结—批评—团结的方针；</li><li>坚持教育引导与制度保障相结合。</li></ol><p>三、历史贡献：<br>为社会主义社会发展提供了理论基础，促进社会和谐稳定。</p><h2 id="✅第六章-邓小平理论">✅第六章 邓小平理论</h2><h3 id="❓13-如何理解邓小平理论的基本理论和精髓？其核心内容是什么？">❓13. 如何理解邓小平理论的基本理论和精髓？其核心内容是什么？</h3><p><strong>答：</strong><br>一、基本理论：<br>邓小平理论的核心命题是“建设有中国特色社会主义”，明确指出中国发展必须走符合国情的社会主义道路。</p><p>二、精髓内容：<br><strong>解放思想，实事求是</strong>，是邓小平理论的灵魂，强调打破“两个凡是”，坚持实践是检验真理的唯一标准。</p><p>三、理论核心：</p><ol><li><strong>什么是社会主义</strong>、<strong>怎样建设社会主义</strong>；</li><li>必须坚持四项基本原则和改革开放两大基本点；</li><li>社会主义的本质是解放和发展生产力、消除贫困、实现共同富裕。</li></ol><p>四、理论地位：<br>是马克思主义中国化的第二次历史性飞跃，在新时代仍具有重要现实指导意义。</p><hr><h3 id="❓14-简述邓小平理论的主要内容">❓14. 简述邓小平理论的主要内容。</h3><p><strong>答：</strong><br>一、社会主义初级阶段理论：</p><ul><li>明确我国处于并将长期处于社会主义初级阶段，这是制定一切方针政策的总依据。</li></ul><p>二、“一个中心、两个基本点”的基本路线：</p><ul><li>一个中心：以经济建设为中心；</li><li>两个基本点：坚持四项基本原则，坚持改革开放。</li></ul><p>三、改革开放战略：</p><ul><li>改革是制度创新，开放是对外吸收先进经验，两者相辅相成；</li><li>着力于解放和发展社会生产力。</li></ul><p>四、社会主义市场经济体制的确立：</p><ul><li>明确社会主义也可以搞市场经济，提出“市场不是资本主义的专利”。</li></ul><p>五、两手抓战略：</p><ul><li>一手抓改革开放和现代化建设，一手抓法制和党的建设。</li></ul><p>六、意义总结：<br>邓小平理论为中国特色社会主义理论体系奠定了坚实基础，实现了从革命向建设的战略转型。</p><hr><h2 id="✅第七章-三个代表-重要思想">✅第七章“三个代表”重要思想</h2><h3 id="❓15-三个代表-重要思想的核心内容和历史地位是什么？">❓15. “三个代表”重要思想的核心内容和历史地位是什么？</h3><p><strong>答：</strong><br>一、核心内容：<br>江泽民同志提出的“三个代表”重要思想，强调中国共产党要始终：</p><ol><li><strong>代表中国先进社会生产力的发展要求</strong>；</li><li><strong>代表中国先进文化的前进方向</strong>；</li><li><strong>代表中国最广大人民的根本利益</strong>。</li></ol><p>二、理论意义：</p><ul><li>明确了党的先进性建设目标，强调党要不断提高执政能力和领导水平；</li><li>强化党的群众基础和执政合法性；</li><li>推动党的建设与时俱进，适应新的历史任务。</li></ul><p>三、历史地位：</p><ul><li>是对邓小平理论的继承和发展，进一步丰富和发展了马克思主义党建学说；</li><li>成为党的指导思想之一，写入党章。</li></ul><hr><h2 id="✅第八章-科学发展观">✅第八章 科学发展观</h2><h3 id="❓16-简述科学发展观的提出背景-核心内容和现实意义">❓16. 简述科学发展观的提出背景、核心内容和现实意义。</h3><p><strong>答：</strong><br>一、提出背景：<br>随着我国经济快速发展，面临资源枯竭、环境污染、地区发展不平衡等新问题，原有发展方式难以为继。</p><p>二、科学发展观的核心内容：</p><ol><li><strong>核心立场</strong>：坚持以人为本，发展为了人民、依靠人民、成果由人民共享；</li><li><strong>基本要求</strong>：坚持全面、协调、可持续发展；</li><li><strong>根本方法</strong>：统筹兼顾，在发展中实现多方面利益平衡；</li><li><strong>目标指向</strong>：实现经济社会和人与自然的和谐统一。</li></ol><p>三、理论意义：</p><ul><li>科学发展观是对中国特色社会主义发展道路的重要完善；</li><li>是在新世纪新阶段党领导发展的指导方针；</li><li>推动经济发展方式转变，实现高质量发展。</li></ul><p>四、历史地位：</p><ul><li>科学发展观是中国特色社会主义理论体系的重要组成部分，2012年写入党章，作为党的指导思想之一。</li></ul><hr><h2 id="🧾附加论述题参考-建议背诵一个">🧾附加论述题参考（建议背诵一个）</h2><h3 id="❓17-如何科学评价毛泽东和毛泽东思想？">❓17. 如何科学评价毛泽东和毛泽东思想？</h3><p><strong>答：</strong><br>一、历史地位：<br>毛泽东同志是中国共产党的主要缔造者，是中国人民伟大的领袖，在中国革命和建设中发挥了决定性作用。</p><p>二、理论贡献：</p><ol><li>毛泽东思想是马克思主义中国化第一次历史飞跃的成果；</li><li>指导中国取得新民主主义革命的伟大胜利；</li><li>创立新民主主义革命理论、人民战争思想、群众路线、党的建设理论等。</li></ol><p>三、历史局限：<br>在“文化大革命”等时期，毛泽东对阶级斗争和社会主义社会的规律认识存在偏差，造成严重损失。</p><p>四、科学评价原则：</p><ul><li>必须坚持历史唯物主义和实事求是原则；</li><li>既要看到伟大功绩，也不回避错误，全面、客观、公正地加以评价。</li></ul><p>五、现实意义：<br>毛泽东思想仍是我们党的指导思想之一，是党宝贵的精神财富，必须长期坚持和不断发展。</p>]]></content>
    
    
    <categories>
      
      <category>SCU</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Review</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello</title>
    <link href="/2023/09/24/Hello/"/>
    <url>/2023/09/24/Hello/</url>
    
    <content type="html"><![CDATA[<h3 id="welcome-to-my-blog">Welcome to my blog</h3><p>This is the second temporary blog powered by Hexo.</p><p>This blog isn’t fully constructed yet.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分块</title>
    <link href="/2022/03/02/%E5%88%86%E5%9D%97/"/>
    <url>/2022/03/02/%E5%88%86%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="分块">分块</h1><p>分块的基本思想大概就是“整块统计，散块暴力”。</p><h2 id="如何分块？">如何分块？</h2><p>设块长，一般为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>，初始化每块的左右边界和每个元素对应的块以及对应的辅助数组。</p><p>不过最优块长可以通过放缩或者解方程求出。</p><p>对于每次区间修改和查询，分「在一块」和「不在一块」两种情况考虑。</p><h2 id="loj-小分块入门⑨题">LOJ 小分块入门⑨题</h2><ol><li>区间加，单点询问</li></ol><p>维护 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span> 数组为整块的加标记。</p><p>修改：如果在一块直接按照散块暴力修改，不在一块的话两边的散块也直接暴力，中间的整块直接加在加标记上。</p><p>查询：直接返回对应位置的值加上对应块的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span> 标记即可。</p><ol start="2"><li>区间加，询问区间小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的元素个数</li></ol><p>对每块维护一个 <code>vector</code> 存储对应块内从小到大排序后的数组。</p><p>修改：散块暴力重构 <code>vector</code>，整块直接加在加标记上，因为整块加并不会改变相对大小。</p><p>查询：散块暴力扫并统计答案，整块直接在 <code>vector</code> 里二分查找（返回下标）即可。注意传的参要减去对应标记。</p><ol start="3"><li>区间加，询问区间前驱</li></ol><p>依然对每块维护一个 <code>vector</code> 存储对应块内从小到大排序后的数组。</p><p>修改：与 2 类似。</p><p>查询：散块暴力扫并统计答案，整块直接在 <code>vector</code> 里二分查找（返回对应数）即可。注意找出的值要加上对应标记。</p><p>细节：<code>lower_bound</code> 返回不小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的第一个值所在的迭代器，所以迭代器要自减一次。另外，它在找不到的时候返回的是尾迭代器，但是这并不代表块内没有对答案的贡献，因为此时 <code>vector</code> 中的最后一个元素也可能是答案。当返回的是首迭代器时及时特判 <code>continue</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=pos[l]+<span class="hljs-number">1</span>;i&lt;pos[r];i++)<br>&#123;<br><span class="hljs-keyword">auto</span> it=<span class="hljs-built_in">lower_bound</span>(sorted[i].<span class="hljs-built_in">begin</span>(),sorted[i].<span class="hljs-built_in">end</span>(),val-add[i]);<br><span class="hljs-keyword">if</span>(it==sorted[i].<span class="hljs-built_in">begin</span>()) <span class="hljs-keyword">continue</span>;<br>it--;<br>ans=<span class="hljs-built_in">max</span>(ans,(*it)+add[i]);<br>flag=<span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>upd：有一种东西叫反向首迭代器 <code>rbegin</code>，用这个可以更方便地判断。</p><ol start="4"><li>区间加，区间求和</li></ol><p>对每个块维护 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span></span></span></span> 数组表示对应块的元素之和。</p><p>修改：与 1 类似。但是在改散块时不要忘记同时维护 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span></span></span></span>。</p><p>查询：散块直接暴力加，整块加对应的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span> 标记。注意在统计散块答案的时候不要忘记加散块长度乘上对应块的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span> 标记。</p><ol start="5"><li>区间开方，区间求和</li></ol><p>此题数据范围为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">0 \le a_i\le 2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>。</p><p>注意到对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 开方并不会改变其大小，又因为在本题中一个数最多被开方 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span> 次，所以我们可以维护一个数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>i</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">vis</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span></span></span></span> 记录每块是否都被开方为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>。如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mi>i</mi><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">vis=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，说明我们没有必要再对此块进行操作。</p><p>修改：不管是整块还是散块直接暴力。对于每次修改无标记块内的内容，暴力判断块内是否都为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 并决定是否打标记。</p><p>查询：与 4 类似，但是不需要额外加 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span> 数组。</p><p>实现技巧：每次开方先在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span></span></span></span> 数组里减去原来的值，再把开方后的值加回去。</p><ol start="6"><li>单点插入，单点询问</li></ol><p>模拟块链。</p><p>对每个块开一个 <code>vector</code>。</p><p>插入：可以在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的时间内定位。当发现某块长度大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">2\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord">2</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span> 时，暴力重构（使用 <code>std::swap</code> 可以在常数时间内完成）。</p><p>查询：暴力定位查询即可。</p><ol start="7"><li>区间乘法，区间加法，单点询问</li></ol><p><s>乍一看：简单题？</s></p><p>类比某线段树模板题可以猜测我们需要维护一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span> 数组和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>u</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">mul</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 数组，然后<s>继续类比可以得到</s>先乘再加好写而且精度更高的规律。</p><p>直接做？错！</p><p>先对整块打标记再对散块暴力可能会导致答案错误，因为不能确保操作的先后顺序。</p><p>所以我们需要一个 <code>pushdown</code> 函数来实现对散块暴力的标记下传，来避免此类问题的出现。</p><p>在散块原值有被更改的风险时应该及时下传并清空标记。</p><p>（<code>pushdown</code> 函数的实现）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L[x];i&lt;=R[x];i++)<br>(a[i]=a[i]%MOD*mul[x]%MOD+add[x]%MOD)%=MOD;<br>mul[x]=<span class="hljs-number">1</span>,add[x]=<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（以修改 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">add</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span> 标记为例）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_add</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>val%=MOD;<br><span class="hljs-keyword">if</span>(pos[l]==pos[r])<br>&#123;<br><span class="hljs-built_in">pushdown</span>(pos[l]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++) (a[i]+=val)%=MOD;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">pushdown</span>(pos[l]),<span class="hljs-built_in">pushdown</span>(pos[r]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=pos[l]+<span class="hljs-number">1</span>;i&lt;pos[r];i++) (add[i]+=val)%=MOD;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=R[pos[l]];i++) (a[i]+=val)%=MOD;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L[pos[r]];i&lt;=r;i++) (a[i]+=val)%=MOD;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>区间询问等于一个数的元素个数+区间推平（数据随机）</li></ol><p><s>我会珂朵莉树！</s></p><p><s>对不起，您被卡常了。</s></p><p><s>而且我不会珂朵莉树（</s></p><p>维护一个数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>a</mi><mi>z</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">lazy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 表示这块曾被覆盖过的修改过的数。</p><p>推平：散块暴力，整块打标记。考虑到操作的先后顺序我们还需要一个 <code>pushdown</code> 来及时下传标记（类比 7）。</p><p>询问：散块暴力，整块如果标记等于询问值就直接加块长，否则暴力。</p><p>很暴力。真的非常暴力。</p><ol start="9"><li>强制在线区间众数（蒲公英）</li></ol><p>BOSS 题。</p><p>设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>u</mi><msub><mi>m</mi><mrow><mi>b</mi><mo separator="true">,</mo><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Sum_{b,i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 块中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 的出现次数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>u</mi><msub><mi>m</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Num_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为从块 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 到块 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 的众数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>n</mi><msub><mi>t</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Cnt_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为从块 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 到块 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 的众数的出现次数。</p><p>离散化之后，这三个数组都可以在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的时间内预处理。</p><p>容易发现，对于一个区间，可能成为答案的数只有散块中的数和所有整块的区间众数。</p><p>分别统计即可。桶的清空可以再遍历一遍散块中的元素做到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="padding-left:0.833em;">n</span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p><p>注意：使用 <code>unordered_map</code> 会被卡常。<s>你有离散化了为什么还要用这个？</s></p><p><s>被卡常的</s>预处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=block_cnt;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++) Sum[i][b[j]]=Sum[i<span class="hljs-number">-1</span>][b[j]];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=L[i];j&lt;=R[i];j++) Sum[i][b[j]]++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=block_cnt;i++)<br>&#123;<br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=L[i];j&lt;=n;j++)<br>&#123;<br>m[b[j]]++;<br><span class="hljs-keyword">if</span>(pos[j]!=pos[j+<span class="hljs-number">1</span>])<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> k:m)<br><span class="hljs-keyword">if</span>(Cnt[i][pos[j]]&lt;k.second)<br>Num[i][pos[j]]=k.first,Cnt[i][pos[j]]=k.second;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Cnt[i][pos[j]]==k.second &amp;&amp; Num[i][pos[j]]&gt;k.first)<br>Num[i][pos[j]]=k.first;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><s>被卡常的</s>查询：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;m;<br><span class="hljs-keyword">if</span>(pos[l]==pos[r])<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++) m[b[i]]++;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=R[pos[l]];i++) m[b[i]]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L[pos[r]];i&lt;=r;i++) m[b[i]]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:m)<br>&#123;<br><span class="hljs-type">int</span> x=i.first;<br>m[x]+=Sum[pos[r]<span class="hljs-number">-1</span>][x]-Sum[pos[l]][x];<br>&#125;<br><span class="hljs-keyword">if</span>(pos[l]+<span class="hljs-number">1</span>&lt;=pos[r]<span class="hljs-number">-1</span> &amp;&amp; !m[Num[pos[l]+<span class="hljs-number">1</span>][pos[r]<span class="hljs-number">-1</span>]])<br>m[Num[pos[l]+<span class="hljs-number">1</span>][pos[r]<span class="hljs-number">-1</span>]]+=Cnt[pos[l]+<span class="hljs-number">1</span>][pos[r]<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-type">int</span> num=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:m)<br>&#123;<br><span class="hljs-keyword">if</span>(cnt&lt;i.second) cnt=i.second,num=i.first;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt==i.second &amp;&amp; num&gt;i.first) num=i.first;<br>&#125;<br><br><span class="hljs-keyword">return</span> dis[num];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="其他好题">其他好题</h2><p><a href="https://www.luogu.com.cn/problem/P4135">P4135 作诗</a></p><p>无修改，多次查询区间出现正偶数次的数的个数。强制在线。</p><p>类比 9，我们预处理前缀出现次数和整块区间的答案，这样就可以涵盖所有情况。</p><p>散块或无整块区间暴力。</p><p>整块直接查表。</p><p>注意：使用 <code>unordered_map</code> 会被卡常。<s>值域都这么小了为什么还要用这个？</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(pos[l]-pos[r])&lt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)<br>&#123;<br>M[a[i]]++;<br><span class="hljs-keyword">if</span>(!(M[a[i]]&amp;<span class="hljs-number">1</span>)) ans++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(M[a[i]]^<span class="hljs-number">1</span>) ans--;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++) M[a[i]]--;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> ans=Ans[pos[l]+<span class="hljs-number">1</span>][pos[r]<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=R[pos[l]];i++) <br>&#123;<br>M[a[i]]++;<br><span class="hljs-keyword">if</span>(!((M[a[i]]+Cnt[pos[r]<span class="hljs-number">-1</span>][a[i]]-Cnt[pos[l]][a[i]])&amp;<span class="hljs-number">1</span>)) ans++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((M[a[i]]+Cnt[pos[r]<span class="hljs-number">-1</span>][a[i]]-Cnt[pos[l]][a[i]])^<span class="hljs-number">1</span>)ans--;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L[pos[r]];i&lt;=r;i++)<br>&#123;<br>M[a[i]]++;<br><span class="hljs-keyword">if</span>(!((M[a[i]]+Cnt[pos[r]<span class="hljs-number">-1</span>][a[i]]-Cnt[pos[l]][a[i]])&amp;<span class="hljs-number">1</span>)) ans++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((M[a[i]]+Cnt[pos[r]<span class="hljs-number">-1</span>][a[i]]-Cnt[pos[l]][a[i]])^<span class="hljs-number">1</span>)ans--;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=R[pos[l]];i++) M[a[i]]--; <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L[pos[r]];i&lt;=r;i++) M[a[i]]--;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Old thing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI archive</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
